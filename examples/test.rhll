// malloc() implementation for the 6502

struct HeapBlock {
    available: u8,
    size: u16,
    next: &HeapBlock,
    prev: &HeapBlock,
}

const ram_end = 0x8000;         // const is in the data segment
let &heap_start, &heap_end;     // uninitialized global data is in the zeropage -> fast!

fn heap_init(prog_end_addr: &void) {
    let init_block: &HeapBlock = prog_end_addr;
    init_block.available = 1;
    init_block.size = ram_end - prog_end_addr;
    init_block.next = init_block.prev = null;
    heap_start = heap_end = init_block;
}

fn crop(block: &HeapBlock, new_size: u16) {
    let excess_size: u16 = block.size - new_size;
    if (excess_size <= sizeof(HeapBlock)) {
        return;
    }

    // update current block
    let original_next: &HeapBlock = block.next;
    block.size = new_size;
    block.next = block + new_size;

    // allocate new block
    block.next.available = 1;
    block.next.prev = block;
    block.next.next = original_next;
    block.next.size = excess_size;

    if (block.next.next != null) {
        // update the next block's prev pointer
        block.next.next.prev = block.next;
    } else {
        // update heap info
        heap_end = block.next;
    }
}

fn malloc(u16: size) -> &void {
    for (entry: &HeapBlock = heap_start;
         entry != null;
         entry = entry.next
    ) {
        u16 required_size = sizeof(HeapBlock) + size;
        if (entry.available && entry.size >= required_size) {
            entry.available = 0;
            crop(entry, required_size);
            return entry + sizeof(HeapBlock);
        }
    }

    return null;
}

fn merge_blocks(first: &HeapBlock, second: &HeapBlock) {
    first.size += second.size;
    first.next = second.next;
    if (second.next != null) {
        second.next.prev = first;
    } else {
        heap_end = first;
    }
}

fn free(ptr: &void) {
    if (ptr == null) {
        return;
    }

    let to_free: &HeapBlock = ptr - sizeof(HeapBlock);
    to_free.available = 1;

    // merge free blocks
    if (to_free.next != null && to_free.next.available) {
        merge_blocks(to_free, to_free.next);
    }
    if (to_free.prev != null && to_free.prev.available) {
        merge_blocks(to_free.prev, to_free);
    }
}
