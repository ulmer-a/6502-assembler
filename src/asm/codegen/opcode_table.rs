

pub fn get_opcode(mnemonic_i: usize, addr_mode_i: usize) -> Option<u8> {
    match OPCODE_TABLE[mnemonic_i][addr_mode_i] {
        -1 => if addr_mode_i != 13 {
            get_opcode(mnemonic_i, 13)
        } else {
            None
        },
        opcode => Some(opcode as u8),
    }
}

#[cfg(test)]
mod tests {
    use crate::asm::model::{AddrMode, IndexMode, Instruction, MemRef};

    #[test]
    fn get_rel_opcode() {
        let i = Instruction::new("beq".into(),
        AddrMode::Memory(IndexMode::None, MemRef::Variable("test".into())));
        assert_eq!(super::get_opcode(i.mnemonic_index(), 2).unwrap(), 0xf0);
    }

    #[test]
    fn get_lda_opcode() {
        let i = Instruction::new("lda".into(),
            AddrMode::Memory(IndexMode::IndexedX, MemRef::Addr(0x1234)));
        assert_eq!(super::get_opcode(i.mnemonic_index(), 9).unwrap(), 0xbd);
    }
}

const OPCODE_TABLE: [[i16; 14]; 98] = [
    //  IMPL   IMM    ZP  zp,X  zp,Y  (zp)(zp,X)(zp),Y   abs abs,X abs,Y (abs)(abs,X)  rel
    [ 0x00,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // BRK
    [   -1, 0x09, 0x05, 0x15,   -1, 0x12, 0x01, 0x11, 0x0d, 0x1d, 0x19,   -1,   -1,   -1 ], // ORA
    [ 0xfb, 0xe2, 0x44, 0xf4,   -1,   -1,   -1,   -1, 0xfc,   -1,   -1,   -1,   -1,   -1 ], // NOP
    [   -1,   -1, 0x04,   -1,   -1,   -1,   -1,   -1, 0x0c,   -1,   -1,   -1,   -1,   -1 ], // TSB
    [ 0x0a,   -1, 0x06, 0x16,   -1,   -1,   -1,   -1, 0x0e, 0x1e,   -1,   -1,   -1,   -1 ], // ASL
    [   -1,   -1, 0x07,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // RMB0
    [ 0x08,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // PHP
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x0f ], // BBR0
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x10 ], // BPL
    [   -1,   -1, 0x14,   -1,   -1,   -1,   -1,   -1, 0x1c,   -1,   -1,   -1,   -1,   -1 ], // TRB
    [   -1,   -1, 0x17,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // RMB1
    [ 0x18,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // CLC
    [ 0x1a,   -1, 0xe6, 0xf6,   -1,   -1,   -1,   -1, 0xee, 0xfe,   -1,   -1,   -1,   -1 ], // INC
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x1f ], // BBR1
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x20,   -1,   -1,   -1,   -1,   -1 ], // JSR
    [   -1, 0x29, 0x25, 0x35,   -1, 0x32, 0x21, 0x31, 0x2d, 0x3d, 0x39,   -1,   -1,   -1 ], // AND
    [   -1, 0x89, 0x24, 0x34,   -1,   -1,   -1,   -1, 0x2c, 0x3c,   -1,   -1,   -1,   -1 ], // BIT
    [ 0x2a,   -1, 0x26, 0x36,   -1,   -1,   -1,   -1, 0x2e, 0x3e,   -1,   -1,   -1,   -1 ], // ROL
    [   -1,   -1, 0x27,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // RMB2
    [ 0x28,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // PLP
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x2f ], // BBR2
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x30 ], // BMI
    [   -1,   -1, 0x37,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // RMB3
    [ 0x38,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // SEC
    [ 0x3a,   -1, 0xc6, 0xd6,   -1,   -1,   -1,   -1, 0xce, 0xde,   -1,   -1,   -1,   -1 ], // DEC
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x3f ], // BBR3
    [ 0x40,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // RTI
    [   -1, 0x49, 0x45, 0x55,   -1, 0x52, 0x41, 0x51, 0x4d, 0x5d, 0x59,   -1,   -1,   -1 ], // EOR
    [ 0x4a,   -1, 0x46, 0x56,   -1,   -1,   -1,   -1, 0x4e, 0x5e,   -1,   -1,   -1,   -1 ], // LSR
    [   -1,   -1, 0x47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // RMB4
    [ 0x48,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // PHA
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x4c,   -1,   -1, 0x6c, 0x7c,   -1 ], // JMP
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x4f ], // BBR4
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x50 ], // BVC
    [   -1,   -1, 0x57,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // RMB5
    [ 0x58,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // CLI
    [ 0x5a,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // PHY
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x5f ], // BBR5
    [ 0x60,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // RTS
    [   -1, 0x69, 0x65, 0x75,   -1, 0x72, 0x61, 0x71, 0x6d, 0x7d, 0x79,   -1,   -1,   -1 ], // ADC
    [   -1,   -1, 0x64, 0x74,   -1,   -1,   -1,   -1, 0x9c, 0x9e,   -1,   -1,   -1,   -1 ], // STZ
    [ 0x6a,   -1, 0x66, 0x76,   -1,   -1,   -1,   -1, 0x6e, 0x7e,   -1,   -1,   -1,   -1 ], // ROR
    [   -1,   -1, 0x67,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // RMB6
    [ 0x68,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // PLA
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x6f ], // BBR6
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x70 ], // BVS
    [   -1,   -1, 0x77,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // RMB7
    [ 0x78,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // SEI
    [ 0x7a,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // PLY
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x7f ], // BBR7
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x80 ], // BRA
    [   -1,   -1, 0x85, 0x95,   -1, 0x92, 0x81, 0x91, 0x8d, 0x9d, 0x99,   -1,   -1,   -1 ], // STA
    [   -1,   -1, 0x84, 0x94,   -1,   -1,   -1,   -1, 0x8c,   -1,   -1,   -1,   -1,   -1 ], // STY
    [   -1,   -1, 0x86,   -1, 0x96,   -1,   -1,   -1, 0x8e,   -1,   -1,   -1,   -1,   -1 ], // STX
    [   -1,   -1, 0x87,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // SMB0
    [ 0x88,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // DEY
    [ 0x8a,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // TXA
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x8f ], // BBS0
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x90 ], // BCC
    [   -1,   -1, 0x97,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // SMB1
    [ 0x98,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // TYA
    [ 0x9a,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // TXS
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0x9f ], // BBS1
    [   -1, 0xa0, 0xa4, 0xb4,   -1,   -1,   -1,   -1, 0xac, 0xbc,   -1,   -1,   -1,   -1 ], // LDY
    [   -1, 0xa9, 0xa5, 0xb5,   -1, 0xb2, 0xa1, 0xb1, 0xad, 0xbd, 0xb9,   -1,   -1,   -1 ], // LDA
    [   -1, 0xa2, 0xa6,   -1, 0xb6,   -1,   -1,   -1, 0xae,   -1, 0xbe,   -1,   -1,   -1 ], // LDX
    [   -1,   -1, 0xa7,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // SMB2
    [ 0xa8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // TAY
    [ 0xaa,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // TAX
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0xaf ], // BBS2
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0xb0 ], // BCS
    [   -1,   -1, 0xb7,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // SMB3
    [ 0xb8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // CLV
    [ 0xba,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // TSX
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0xbf ], // BBS3
    [   -1, 0xc0, 0xc4,   -1,   -1,   -1,   -1,   -1, 0xcc,   -1,   -1,   -1,   -1,   -1 ], // CPY
    [   -1, 0xc9, 0xc5, 0xd5,   -1, 0xd2, 0xc1, 0xd1, 0xcd, 0xdd, 0xd9,   -1,   -1,   -1 ], // CMP
    [   -1,   -1, 0xc7,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // SMB4
    [ 0xc8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // INY
    [ 0xca,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // DEX
    [ 0xcb,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // WAI
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0xcf ], // BBS4
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0xd0 ], // BNE
    [   -1,   -1, 0xd7,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // SMB5
    [ 0xd8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // CLD
    [ 0xda,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // PHX
    [ 0xdb,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // STP
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0xdf ], // BBS5
    [   -1, 0xe0, 0xe4,   -1,   -1,   -1,   -1,   -1, 0xec,   -1,   -1,   -1,   -1,   -1 ], // CPX
    [   -1, 0xe9, 0xe5, 0xf5,   -1, 0xf2, 0xe1, 0xf1, 0xed, 0xfd, 0xf9,   -1,   -1,   -1 ], // SBC
    [   -1,   -1, 0xe7,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // SMB6
    [ 0xe8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // INX
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0xef ], // BBS6
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0xf0 ], // BEQ
    [   -1,   -1, 0xf7,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // SMB7
    [ 0xf8,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // SED
    [ 0xfa,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1 ], // PLX
    [   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 0xff ], // BBS7
];
